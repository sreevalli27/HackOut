# -*- coding: utf-8 -*-
"""collect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jMdCHQV5fR0I4HH1nDRcoBya_EEEnKsN

# **TRANSLATOR**
"""

!pip install SpeechRecognition

import speech_recognition as sr

recognizer = sr.Recognizer()

audio_file = "hindi_audio.wav"  # Replace with the path to your Hindi audio file

with sr.AudioFile(audio_file) as source:
    audio = recognizer.record(source)

hindi_text = recognizer.recognize_google(audio, language="hi-IN")

!pip install googletrans==4.0.0-rc1

from googletrans import Translator

translator = Translator()
english_text = translator.translate(hindi_text, src="hi", dest="en").text

!pip install gTTS

from gtts import gTTS

english_audio = gTTS(english_text)
english_audio.save("english_audio.mp3")

"""# **MODEL**"""

!pip install --upgrade pip
!pip install --upgrade setuptools

!pip install openai

import openai

# Set up your OpenAI API key
api_key = "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"
openai.api_key = api_key

# Initialize the OpenAI API client
openai.api_key = api_key

file_path = '/content/test-audio-1.txt'

with open(file_path, 'r') as file:
    text_to_classify = file.read()

# Construct a prompt for the model
prompt = f"Based on the following text, identify the relevant Maslow's hierarchy of needs category:\n\"{text_to_classify}\"\nCategory:"

# Send the prompt to the text-davinci model
response = openai.Completion.create(
    engine="text-davinci-003",
    prompt=prompt,
    max_tokens=5,  # Set the number of tokens based on your prompt
)

# Extract the model's response
model_response = response.choices[0].text.strip()

# Print the model's response
print("The model's response suggests the category:", model_response)

# 2. Classify the conversation using GPT-3
def classify_conversation(conversation_text, temperature=0.2):
    classification_prompt = f"Classify conversation into one of Maslow's needs:\n\n{conversation_text} only give the maslow need"
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=classification_prompt,
        max_tokens=7,
        temperature=temperature,  # temperature
    )
    classification = response.choices[0].text.strip()
    return classification

# Generate therapist-like responses using GPT-3
def generate_therapist_response(conversation_text, maslow_category, temperature=0.2):
    therapist_prompt = f"Assume yourself to be a therapist and provide a therapist-like response to overcome the situation, for the following conversation in the {maslow_category} category:\n\n{conversation_text}"
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=therapist_prompt,
        max_tokens=300,  # suitable maximum token limit
        temperature=temperature,  # temperature
    )
    therapist_response = response.choices[0].text.strip()
    return therapist_response

maslow_category = classify_conversation(conversation_text, temperature=0.2)
therapist_response = generate_therapist_response(conversation_text, maslow_category, temperature=0.2)

print("Maslow need:", maslow_category)
print(therapist_response)

